import os
import hashlib
import requests
from datetime import datetime

# Constants, typically these would be in a separate config file
VIRUS_TOTAL_API_KEY = 'your_virustotal_api_key_here'
REPORT_DIR = './reports'

def generate_file_hash(filename):
    '''Generate MD5 hash of a file.'''
    md5_hash = hashlib.md5()
    with open(filename, 'rb') as file:
        # Read and update hash in chunks of 4K
        for byte_block in iter(lambda: file.read(4096), b''):
            md5_hash.update(byte_block)
    return md5_hash.hexdigest()


def check_virus_total(file_hash):
    '''Check file hash against VirusTotal database.'''
    params = {'apikey': VIRUS_TOTAL_API_KEY, 'resource': file_hash}
    headers = {
      'Accept-Encoding': 'gzip, deflate',
      'User-Agent' : 'gzip, My Python requests library example client or username'
    }
    response = requests.post('https://www.virustotal.com/vtapi/v2/file/report', 
                             params=params, headers=headers)
    return response.json()


def analyze_directory(directory):
    '''Analyze all executable files in a directory.'''
    if not os.path.exists(REPORT_DIR):
        os.makedirs(REPORT_DIR)
        
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('.exe'):
                file_path = os.path.join(root, file)
                print(f'Analyzing {file_path}...')
                file_hash = generate_file_hash(file_path)
                result = check_virus_total(file_hash)
                save_report(file, result)


def save_report(filename, analysis_result):
    '''Save the analysis report to a file.'''
    timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
    report_file = f'{REPORT_DIR}/{filename}_{timestamp}.txt'
    
    with open(report_file, 'w') as file:
        file.write(f"Analysis Report for {filename}")



        
        positive_results = analysis_result.get('positives', 0)
        total_results = analysis_result.get('total', 0)
        
        # If file has been analyzed before
        if positive_results is not None:
            file.write(f'Detection Ratio: {positive_results}/{total_results}')


            scans = analysis_result.get('scans', {})
            for scanner, scan_result in scans.items():
                detected = scan_result.get('detected', False)
                result = 'Malicious' if detected else 'Clean'
                file.write(f"{scanner}: {result}")


def main():
    target_directory = input('Enter the path of directory to analyze: ')
    analyze_directory(target_directory)

if __name__ == '__main__':
    main()